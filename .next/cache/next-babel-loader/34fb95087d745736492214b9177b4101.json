{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { useText } from '~/theme/common';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport useStyles from './contact-style';\n\nfunction Form(props) {\n  var classes = useStyles();\n  var text = useText();\n\n  var _useState = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    message: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      openNotif = _useState6[0],\n      setNotif = _useState6[1];\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setValues(_objectSpread({}, values, _defineProperty({}, name, event.target.value)));\n    };\n  };\n\n  var submitForm = function submitForm(ev) {\n    ev.preventDefault();\n    var form = ev.target;\n    var data = new FormData(form);\n    var xhr = new XMLHttpRequest();\n    xhr.open(form.method, form.action);\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n      if (xhr.status === 200) {\n        form.reset();\n        setStatus(\"SUCCESS\");\n        alert(\"SUCCESS!\");\n        window.location.reload();\n      } else {\n        setStatus(\"ERROR\");\n        alert(\"FAILED TO SEND!\");\n        window.location.reload();\n      }\n    };\n\n    xhr.send(data);\n  };\n\n  var handleClose = function handleClose() {\n    setNotif(false);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.formWrap\n  }, React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    key: \"top right\",\n    open: openNotif,\n    autoHideDuration: 4000,\n    onClose: handleClose,\n    ContentProps: {\n      'aria-describedby': 'message-id'\n    },\n    message: React.createElement(\"span\", {\n      id: \"message-id\"\n    }, \"Message Sent\")\n  }), React.createElement(Paper, {\n    className: classes.formBox\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 6\n  }, React.createElement(Grid, {\n    item: true,\n    lg: 5,\n    xs: 12\n  }, React.createElement(Typography, {\n    className: clsx(classes.title, text.title),\n    variant: \"h3\"\n  }, \"Contact Me.\")), React.createElement(Grid, {\n    item: true,\n    lg: 7,\n    xs: 12\n  }, React.createElement(\"div\", {\n    className: classes.form\n  }, React.createElement(ValidatorForm, {\n    onSubmit: submitForm,\n    action: \"https://formspree.io/moqkvndr\",\n    method: \"POST\",\n    onError: function onError(errors) {\n      return console.log(errors);\n    }\n  }, React.createElement(TextValidator, {\n    className: classes.input,\n    label: \"What is your name?*\",\n    onChange: handleChange('name'),\n    name: \"Name\",\n    value: values.name,\n    validators: ['required'],\n    errorMessages: ['this field is required']\n  }), React.createElement(TextValidator, {\n    className: classes.input,\n    label: \"What is your email?*\",\n    onChange: handleChange('email'),\n    name: \"Email\",\n    value: values.email,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['this field is required', 'email is not valid']\n  }), React.createElement(TextValidator, {\n    multiline: true,\n    rows: \"6\",\n    className: classes.input,\n    label: \"Write your message here\",\n    onChange: handleChange('message'),\n    name: \"Message\",\n    value: values.message\n  }), React.createElement(\"div\", {\n    className: classes.btnArea\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    size: \"large\"\n  }, \"Send Message\"))))))));\n}\n\nForm.propTypes = {};\nexport default Form;","map":{"version":3,"sources":["/home/sean.droke/Development/seandroke.com/components/Contact/Form.js"],"names":["React","useState","PropTypes","clsx","Button","Paper","Grid","Typography","Snackbar","useText","ValidatorForm","TextValidator","useStyles","Form","props","classes","text","name","email","phone","company","message","values","setValues","status","setStatus","openNotif","setNotif","handleChange","event","target","value","submitForm","ev","preventDefault","form","data","FormData","xhr","XMLHttpRequest","open","method","action","setRequestHeader","onreadystatechange","readyState","DONE","reset","alert","window","location","reload","send","handleClose","formWrap","vertical","horizontal","formBox","title","errors","console","log","input","btnArea","propTypes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { useText } from '~/theme/common';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport useStyles from './contact-style';\r\n\r\nfunction Form(props) {\r\n  const classes = useStyles();\r\n  const text = useText();\r\n  const [values, setValues] = useState({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    company: '',\r\n    message: '',\r\n  });\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const [openNotif, setNotif] = useState(false);\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, [name]: event.target.value });\r\n  };\r\n\r\n  const submitForm = (ev) => {\r\n    ev.preventDefault();\r\n    const form = ev.target;\r\n    const data = new FormData(form);\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(form.method, form.action);\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\r\n      if (xhr.status === 200) {\r\n        form.reset();\r\n        setStatus(\"SUCCESS\")\r\n        alert(\"SUCCESS!\")\r\n        window.location.reload()\r\n      } else {\r\n        setStatus(\"ERROR\")\r\n        alert(\"FAILED TO SEND!\")\r\n        window.location.reload()\r\n      }\r\n    };\r\n    xhr.send(data);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setNotif(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.formWrap}>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        key=\"top right\"\r\n        open={openNotif}\r\n        autoHideDuration={4000}\r\n        onClose={handleClose}\r\n        ContentProps={{\r\n          'aria-describedby': 'message-id',\r\n        }}\r\n        message={<span id=\"message-id\">Message Sent</span>}\r\n      />\r\n      <Paper className={classes.formBox}>\r\n        <Grid container spacing={6}>\r\n          <Grid item lg={5} xs={12}>\r\n            <Typography className={clsx(classes.title, text.title)} variant=\"h3\">\r\n              Contact Me.\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item lg={7} xs={12}>\r\n            <div className={classes.form}>\r\n              <ValidatorForm\r\n                onSubmit={submitForm}\r\n                action=\"https://formspree.io/moqkvndr\"\r\n                method=\"POST\"\r\n                onError={errors => console.log(errors)}\r\n              >\r\n                <TextValidator\r\n                  className={classes.input}\r\n                  label=\"What is your name?*\"\r\n                  onChange={handleChange('name')}\r\n                  name=\"Name\"\r\n                  value={values.name}\r\n                  validators={['required']}\r\n                  errorMessages={['this field is required']}\r\n                />\r\n                <TextValidator\r\n                  className={classes.input}\r\n                  label=\"What is your email?*\"\r\n                  onChange={handleChange('email')}\r\n                  name=\"Email\"\r\n                  value={values.email}\r\n                  validators={['required', 'isEmail']}\r\n                  errorMessages={['this field is required', 'email is not valid']}\r\n                />\r\n                <TextValidator\r\n                  multiline\r\n                  rows=\"6\"\r\n                  className={classes.input}\r\n                  label=\"Write your message here\"\r\n                  onChange={handleChange('message')}\r\n                  name=\"Message\"\r\n                  value={values.message}\r\n                />\r\n                <div className={classes.btnArea}>\r\n                  <Button variant=\"contained\" type=\"submit\" color=\"primary\" size=\"large\">\r\n                    Send Message\r\n                  </Button>\r\n                </div>\r\n              </ValidatorForm>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}